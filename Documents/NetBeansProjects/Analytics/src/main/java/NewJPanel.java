
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.awt.Image;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author szymo
 */

public class NewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    public NewJPanel() {
        initComponents();
    }
    
    public void clear() {
        Graphics g = image.getGraphics();
        g.clearRect(0, 0, image.getWidth(this), image.getHeight(this));
        repaint();
    }
    
    public Color getColor(){
        return chartColor;
    }
    
    public Image getImage(){
        return this.image;
    }
    
    @Override
    public void paint(Graphics g){
        if(image !=null) {
            g.drawImage(image, 0, 0, this);
        } else {
            image = createImage(this.getWidth(), this.getHeight());
        }
    }
    
    public void drawArrow() {
        Graphics g = image.getGraphics();
        g.drawLine(margin, y, image.getWidth(this) - margin, y);
        g.drawLine(image.getWidth(this) - margin - arrowHead, y, image.getWidth(this) - 2* arrowHead , y - 1);
        g.drawLine(image.getWidth(this) - margin - arrowHead, y, image.getWidth(this) - 2* arrowHead , y - 3);
        repaint();
    }
    
    public void drawTopArrow(){
        Graphics g = image.getGraphics();
        g.drawLine(margin, image.getHeight(this), image.getWidth(this) - margin, getHeight());
    }
    
    public void drawBottomArrow() {
        Graphics g = image.getGraphics();
        g.drawLine(margin, 0, image.getWidth(this) - margin, 0);
    }
    
    public void drawYArrow(int Start_chart, int End_chart){
        Graphics g = image.getGraphics();
        double X_number = End_chart - Start_chart;
        double number_width = 361;
        Double y_arrow_point = 0.0;
        double points = X_number/number_width;
        if(Start_chart < 0 && End_chart > 0){
            y_arrow_point = Math.abs(Start_chart) / points;
            g.drawLine(y_arrow_point.intValue() - margin, 0, y_arrow_point.intValue() - margin, image.getHeight(this) * 1);
        }else if(Start_chart > 0) {
            g.drawLine(0, 0, 0, image.getHeight(this) * 1);
        } else {
            g.drawLine(image.getWidth(this) - margin, 0, image.getWidth(this) - margin, image.getHeight(this));
        }
        
    }
    
    public void drawFunction(Double[] arr) {
        Graphics g = image.getGraphics();
        g.setColor(chartColor);
        for(int i = 0; i < arr.length - 2; i++){
            if(arr[i] != null){
                if(!"NaN".equals(arr[i].toString()) && !"NaN".equals(arr[i + 1])){
                    g.drawLine(i, arr[i].intValue(), i + 1, arr[i+1].intValue());
                }
                }
            
            
        }
    }
    
    public int calculateSize() {
        return image.getWidth(this);
    }
    
    public int getMaxValueIndex(int[] arr) {
        int temp = arr[0];
        int index = 0;
        for(int i = 0; i < arr.length; i++){
            if(arr[i] > temp){
                temp = arr[i];
                index = i;
            }
        }
        return index;
    }
    
    public int getMinValueIndex(int[] arr) {
        int temp = arr[0];
        int index = 0;
        for(int i = 0; i < arr.length; i++){
            if(arr[i] < temp){
                temp = arr[i];
                index = i;
            }
        }
        return index;
    }
    
    public void setColor(Color newColor) {
        chartColor = newColor;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(130, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(214, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(63, 63, 63))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
    private Image image;
    private Color chartColor = Color.BLACK;
    private Color color = Color.red;
    private int margin = 5;
    private int y = 100;
    private int arrowHead = 5;
}
